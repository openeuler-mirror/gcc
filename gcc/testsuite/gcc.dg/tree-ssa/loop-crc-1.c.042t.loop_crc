
;; Function updcrc (updcrc, funcdef_no=0, decl_uid=3687, cgraph_uid=1, symbol_order=1)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 6 4 7 5
;;
;; Loop 1
;;  header 4, latch 7
;;  depth 1, outer 0
;;  nodes: 4 7
;; 2 succs { 5 3 }
;; 3 succs { 6 5 }
;; 6 succs { 4 }
;; 4 succs { 7 5 }
;; 7 succs { 4 }
;; 5 succs { 1 }

Starting the loop_crc pass
======================================
Processing loop 1:
======================================
;;
;; Loop 1
;;  header 4, latch 7
;;  depth 1, outer 0
;;  nodes: 4 7


The 1th loop form is success matched,and the loop can be optimized.
updcrc (uch * s, unsigned int n)
{
  static ulg crc = 4294967295;
  register ulg c;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  ulg _21;

  <bb 2> :
  if (s_12(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  c_14 = crc;
  if (n_15(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 6> :

  <bb 4> :
  # s_8 = PHI <s_12(D)(6), s_16(7)>
  # n_9 = PHI <n_15(D)(6), n_18(7)>
  # c_10 = PHI <c_14(6), c_17(7)>
  s_16 = s_8 + 1;
  _2 = *s_8;
  _3 = (long unsigned int) _2;
  _4 = _3 ^ c_10;
  _5 = _4 & 255;
  _6 = crc_32_tab[_5];
  _7 = c_10 >> 8;
  c_17 = _6 ^ _7;
  n_18 = n_9 + 4294967295;
  if (n_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 7> :
  goto <bb 4>; [100.00%]

  <bb 5> :
  # c_11 = PHI <4294967295(2), c_14(3), c_17(4)>
  crc = c_11;
  _21 = c_11 ^ 4294967295;
  return _21;

}


